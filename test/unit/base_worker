var common = require('../common');
var async = require('async');
var request = require('supertest');
var crypto = require('crypto-js');
var should = require('should');
var assert = require('assert');

var should = common.should;
var DELAY = common.DELAY;
var appKey = common.appKey;
var url = common.url;
var socketPort = 8080;
var Models = require('telepat-models');

var socket = null;
var messagingClient = null;

var adminEmail = 'admin' + Math.round(Math.random()*1000000) + '@example.com';
var adminPassword = '5f4dcc3b5aa765d61d8327deb882cf99';

var admin = {
	email: adminEmail,
	password: adminPassword
};

var authValue;
var appID;

var appIDsha256 = crypto.SHA256(appKey).toString(crypto.enc.Hex);

var clientRequest = {
	name: "test-app",
	keys: [ common.appKey ]
};

var schemaClientRequest = {
	appId: appID,
	schema: {
		answers: {
			namespace: "answers",
			type: "answers",
			properties: {},
			belongsTo: [
				{
					parentModel: "events",
					relationType: "hasSome"
				}
			],
			read_acl: 6,
			write_acl: 6,
			meta_read_acl: 6
		},
		comments: {
			namespace: "comments",
			type: "comments",
			properties: {
				text: {
					type: "string"
				}
			},
			belongsTo: [
				{
					parentModel: "events",
					relationType: "hasMany"
				}
			],
			read_acl: 6,
			write_acl: 6,
			meta_read_acl: 6
		},
		events: {
			namespace: "events",
			type: "events",
			properties: {
				text: {
					type: "string"
				},
				image: {
					type: "string"
				},
				options: {
					type: "object"
				}
			},
			hasMany: [
				"comments"
			],
			hasSome: [
				"answers"
			],
			read_acl: 7,
			write_acl: 7,
			meta_read_acl: 4,
			icon: "fa-image",
			hasSome_property: "options"
		},
		things: {
			namespace: "events",
			type: "events",
			properties: {
				text: {
					type: "string"
				},
				image: {
					type: "string"
				},
				options: {
					"type": "object"
				}
			},
			hasMany: [
				"comments"
			],
			read_acl: 0,
			write_acl: 0,
			meta_read_acl: 0
		},
		others: {
			namespace: "events",
			type: "events",
			properties: {
				text: {
					type: "string"
				},
				image: {
					type: "string"
				},
				options: {
					type: "object"
				}
			},
			hasMany: [
				"comments"
			],
			read_acl: 4,
			write_acl: 4,
			meta_read_acl: 4
		}
	}
};

var contextID;
var deviceIdentification;
var userToken;
var userAuthValue;

var userclientrequest = {
	email: 'user'+Math.round(Math.random()*1000000)+'@example.com',
	password: "secure_password1337",
	name: "John Smith"
};

var deviceToken;

describe('Function', function() {

	before(function (done) {

		this.timeout(10000);

		messagingClient = new Models['amqp']({
			host: '10.32.0.17',
			port: 2181,
			broadcast: false
		}, 'telepat-worker-test-0', 'write');


		async.series([
			function(callback) {
				request(url)
					.post('/admin/add')
					.send(admin)
					.end(function(){
						callback();
					});
			},
			function(callback) {
				request(url)
					.post('/admin/login')
					.set('Content-type','application/json')
					.send(admin)
					.end(function (err, res) {

						var token = res.body.content.token;
						authValue = 'Bearer ' + token;
						callback();
					});
			},
			function(callback) {
				request(url)
					.post('/admin/app/add')
					.set('Content-type', 'application/json')
					.set('Authorization', authValue)
					.send(clientRequest)
					.end(function (err, res) {
						appID = res.body.content.id;
						callback();
					});
			},
			function(callback) {
				request(url)
					.post('/admin/schema/update')
					.set('Content-type','application/json')
					.set('Authorization', authValue )
					.set('X-BLGREQ-APPID', appID )
					.send(schemaClientRequest)
					.end(function (err, res) {
						callback();
					});
			},
			function(callback) {
				var clientrequest = {
					name: "context"
				};

				request(url)
					.post('/admin/context/add')
					.set('Content-type','application/json')
					.set('Authorization', authValue )
					.set('X-BLGREQ-APPID', appID )
					.send(clientrequest)
					.end(function(err, res) {

						contextID = res.body.content.id;
						callback();
					});
			},
			function(callback) {

				var clientrequest = {
					info: {
						os: "Android",
						version: "4.4.3",
						sdk_level: 19,
						manufacturer: "HTC",
						model: "HTC One_M8",
						udid: 'invalidUDID'
					},
					persistent: {
						type: "android",
						token: "android pn token",
						active: 0
					}
				};

				request(url)
					.post('/device/register')
					.set('X-BLGREQ-SIGN', appIDsha256)
					.set('X-BLGREQ-UDID', '')
					.set('X-BLGREQ-APPID',appID)
					.send(clientrequest)
					.end(function(err, res) {

						deviceIdentification =  res.body.content.identifier;
						callback();
					});
			},
			function(callback) {

				request(url)
					.post('/user/register')
					.set('Content-type','application/json')
					.set('X-BLGREQ-SIGN', appIDsha256 )
					.set('X-BLGREQ-APPID', appID )
					.set('X-BLGREQ-UDID', deviceIdentification )
					.send(userclientrequest)
					.end(function(err, res) {
console.log(res.body);
						setTimeout(callback,3000);
					});
			},
			function(callback) {

				request(url)
					.post('/user/login_password')
					.set('Content-type','application/json')
					.set('X-BLGREQ-SIGN', appIDsha256 )
					.set('X-BLGREQ-APPID', appID )
					.set('X-BLGREQ-UDID', deviceIdentification )
					.send(userclientrequest)
					.end(function(err, res) {
console.log(res.body);
						userToken = res.body.content.token;
						userAuthValue = 'Bearer ' + userToken;
						callback();
					});
			},
			function(callback) {

				socket = require('socket.io-client')('http://localhost:' + socketPort);
				socket.on('welcome', function (msg) {

					console.log('Received socket token: ' + msg.sessionId);
					deviceToken =  msg.sessionId;
					callback();
				});
			},
			function(callback) {

				var clientrequest = {
					volatile: {
						type: "sockets",
						token: deviceToken,
						active: 1
					}
				};

				request(url)
					.post('/device/register')
					.set('X-BLGREQ-SIGN', appIDsha256)
					.set('X-BLGREQ-UDID', deviceIdentification)
					.set('X-BLGREQ-APPID',appID)
					.send(clientrequest)
					.end(function(err, res) {
						callback();
					});
			},
			function(callback) {

				var subclientrequest = {
					channel: {
						context: "context",
						model: "user"
					}
				};

				request(url)
					.post('/object/subscribe')
					.set('Content-type','application/json')
					.set('X-BLGREQ-SIGN', appIDsha256)
					.set('X-BLGREQ-UDID', deviceIdentification)
					.set('X-BLGREQ-APPID',appID)
					.set('Authorization', userAuthValue )
					.send(subclientrequest)
					.end(function(err, res) {
console.log(res.body);
						callback();
						done();
					});
			},
		]);
	});

	after(function (done) {

		if(socket)
			socket.close();
		done();
	});


	it('should receive data', function(done) {

		this.timeout(1000*DELAY);

		socket.on('message', function(data) {
			console.log('Received data: '+JSON.stringify(data)+"\n");
			done();
		});

		messagingClient.send([
			'{"op":"add","object":{"email":"user821036@example.com","password":"$2a$10$N9qo8uLOickgx2ZMRZoMye6lvXrppdmLBtQV62dantw4i4qTnUuL2","name":"John Smith","friends":[],"type":"user","devices":["a76c9e3f-5451-4694-9613-26a5a564c81c"]},"applicationId":"9aec6313-3a77-48f3-9df2-1dfdcc98b711","isUser":true}'
		], 'aggregation', function(){});
	});
});
